% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TSP_5_B_and_B.R
\name{TSP_B_and_B}
\alias{TSP_B_and_B}
\title{Branch and Bound Algorithm for Solving the Traveling Salesman Problem (TSP)}
\usage{
TSP_B_and_B(data)
}
\arguments{
\item{data}{A numeric matrix or data frame where each row represents a city and each column represents 
its coordinates (for a 2D TSP).}
}
\value{
A list containing the following elements:
\describe{
  \item{best_tour}{A numeric vector representing the order of cities in the optimal tour. The class attribute is set to "TSP".}
  \item{best_cost}{The total cost of the optimal tour.}
  \item{nb_call}{The total number of recursive calls made during the algorithm execution.}
}
}
\description{
This function implements the \bold{Branch and Bound} algorithm to solve the \bold{Traveling Salesman Problem (TSP)}. 
It explores all possible tours but efficiently prunes branches that cannot lead to a better solution 
than the best one found so far by using a lower bound to eliminate suboptimal paths.

The algorithm starts from a root node (an empty path) and recursively explores all possible tours by 
adding unvisited cities one by one, while applying the bound function to prune branches of the search tree.
Once all cities are visited, the function checks if the cost of the tour is better than the current best tour.
}
\examples{
# Generate a random set of cities
cities <- matrix(runif(10), ncol = 2)
# Solve TSP using Branch and Bound
result <- TSP_B_and_B(cities)
print(result$best_tour)
print(result$best_cost)

}
