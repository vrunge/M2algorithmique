% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TSP_1_naif.R
\name{TSP_naif}
\alias{TSP_naif}
\title{Algorithme Naïf pour le Problème du Voyageur de Commerce (TSP)}
\usage{
TSP_naif(data, type = "one")
}
\arguments{
\item{data}{Une matrice ou un \code{data.frame} représentant les coordonnées des villes. Les
lignes doivent correspondre aux villes et les colonnes aux coordonnées (par exemple,
\code{x} et \code{y} dans un espace 2D).}

\item{type}{Un caractère indiquant la manière de choisir le point de départ :
\itemize{
  \item{"one"} (par défaut) : Une ville de départ est choisie aléatoirement.
  \item{"all"} : Teste toutes les villes comme point de départ et choisit le meilleur trajet.}}
}
\value{
Un vecteur représentant l'ordre des villes à visiter pour obtenir le trajet le plus court, dans
le cadre du problème du voyageur de commerce. Ce vecteur a un attribut \code{class} défini à
\code{"TSP"}.
}
\description{
Résout le problème du voyageur de commerce (TSP) en utilisant une approche heuristique naïve
basée sur l'insertion des villes dans le trajet à chaque étape. Le meilleur trajet est déterminé
en testant un ou tous les points de départ possibles (option type).
}
\details{
L'algorithme fonctionne en choisissant un point de départ (soit aléatoirement, soit en testant toutes
les villes) et en insérant les villes restantes à chaque étape. La ville qui minimise la distance
totale est ajoutée à chaque étape du trajet jusqu'à ce que toutes les villes soient visitées.

Une fois tous les trajets testés (en fonction de la stratégie de départ choisie), la fonction retourne
le trajet avec la distance totale la plus courte.
}
\examples{

n <- 10
villes <- matrix(runif(2*n), n, 2)
TSP_naif(villes, type = "one")
}
