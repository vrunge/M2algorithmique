% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{TSP_naif_Rcpp}
\alias{TSP_naif_Rcpp}
\title{TSP Naive Algorithm (C++ Implementation)}
\usage{
TSP_naif_Rcpp(data, type = "one")
}
\arguments{
\item{data}{A numeric matrix or data frame where each row represents a city and each column represents the coordinates of that city (e.g., x and y coordinates in 2D space).}

\item{type}{A character string specifying how the starting city is chosen. Options include:
 \itemize{
  \item \code{"one"} (default): Randomly selects a single starting city.
  \item \code{"all"}: Tests all cities as possible starting points and selects the best tour.
}}
}
\value{
A numeric vector representing the order of cities in the shortest found tour. The vector is assigned the class "TSP".
}
\description{
This function implements a naive heuristic approach for solving the \bold{Traveling Salesman Problem (TSP)} in C++ and is exported to R using Rcpp. 
The algorithm uses a simple insertion method to construct a tour by adding cities one by one, minimizing the distance at each step (greedy strategy).

The algorithm starts from a specified city and iteratively adds the nearest non-visited city to the tour, updating the tour until all cities are visited. 
In \code{"all"} mode, the best tour is selected by testing all possible starting cities and computing the total distance for each tour.
}
\details{
The algorithm is a heuristic approach and does not guarantee the global optimal solution, but aims to find a good solution in a reasonable amount of time.
 \itemize{
  \item \bold{Time Complexity:} O(n²), where `n` is the number of cities. The algorithm computes the pairwise distances for each pair of cities.
  \item \bold{Space Complexity:} O(n²) due to the storage of the distance matrix.
}
The result is a tour with the shortest found distance, based on the starting point(s) and insertion method.
}
\examples{
n <- 40
villes <- matrix(runif(2*n), n, 2)
TSP_naif_Rcpp(villes, type = "one")
}
